        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:32
        -:    0:Programs:1
        -:    1:/*
        -:    2:randomtestadventurer.c
        -:    3:Tests the adventurer card from dominion.c
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdlib.h>
        -:   10:#include <stdio.h>
        -:   11:#include <math.h>
        -:   12:#include <assert.h>
        -:   13:
        -:   14:#define NUMBER_OF_TESTS 3
        -:   15:
        -:   16:int main (int argc, char** argv) {
        -:   17:
        -:   18:
       32:   19:	printf("Starting test\n");
       32:   20:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
       32:   21:	int numSuccess = 0, numFail = 0;
        -:   22:
        -:   23:	//printf("Here1\n");
      340:   24:	for(int i = 0; i < NUMBER_OF_TESTS; i++) {
        -:   25:
        -:   26:
      138:   27:		printf("Here2\n");
      138:   28:		int numPlayers = rand() % 4;
      138:   29:		int player = 0;
      138:   30:		int seed = rand();
      138:   31:		struct gameState *g = malloc(sizeof(struct gameState));			
      138:   32:		int status = initializeGame(numPlayers, k, seed, g);		
        -:   33:
        -:   34:
      138:   35:		printf("Here3\n");
      138:   36:		g->deckCount[player] = rand() % MAX_DECK;						
      138:   37:		g->discardCount[player] = rand() % MAX_DECK;					
      138:   38:		int oldHand = g->handCount[player] = rand() % MAX_HAND;			
      138:   39:		int opponentHand = g->handCount[1] = rand() % MAX_HAND;
      138:   40:		int opponentDeck = g->deckCount[1] = rand() % MAX_DECK;
        -:   41:
        -:   42:
      138:   43:		printf("%d\n", g->handCount[player]);
      138:   44:		printf("%d\n", g->handCount[1]);	  
      138:   45:		int treasureStatus = 0;	
        -:   46:								
        -:   47:	
      138:   48:		printf("Here4\n");
    80370:   49:		for(int t = 0 ; t < g->handCount[player]; t++) {
   120141:   50:			if((g->hand[player][t] == gold) || (g->hand[player][t] == silver) || (g->hand[player][t] == copper)) {
      482:   51:				treasureStatus++;
      482:   52:			}
    40047:   53:		}
      138:   54:		cardEffect(adventurer, 1, 1, 1, g, 0, 0);						
        -:   55:
    92700:   56:		for(int j = 0 ; j < g->handCount[player]; j++) {
   138636:   57:			if((g->hand[player][j] == gold) || (g->hand[player][j] == silver) || (g->hand[player][j] == copper)) {
      809:   58:				treasureStatus--;
      809:   59:			}
    46212:   60:		}
        -:   61:		
        -:   62:		
      236:   63:		if(treasureStatus < 0 && oldHand + 1 == g->handCount[player] && opponentHand == g->handCount[1] && opponentDeck == g->deckCount[1]) 
    #####:   64:			numSuccess++;											
        -:   65:		else {
      138:   66:			numFail++;
        -:   67:		}
        -:   68:		
      138:   69:		printf("Pre-Free\n");
      138:   70:		free(g);
      138:   71:		printf("Post-Free\n");
      138:   72:	}
        -:   73:
       32:   74:	printf("Testing adventurer card...\nNumber of successful tests: %d. Number of failed tests: %d. Total number of tests: %d]\n", numSuccess, numFail, NUMBER_OF_TESTS);
        -:   75:
       32:   76:	return 0;
        -:   77:}
