        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:26
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
     7868:    9:  if (*(int*)a > *(int*)b)
     1003:   10:    return 1;
     6865:   11:  if (*(int*)a < *(int*)b)
     2468:   12:    return -1;
     4397:   13:  return 0;
     7868:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
       10:   23:  int* k = malloc(10 * sizeof(int));
       10:   24:  k[0] = k1;
       10:   25:  k[1] = k2;
       10:   26:  k[2] = k3;
       10:   27:  k[3] = k4;
       10:   28:  k[4] = k5;
       10:   29:  k[5] = k6;
       10:   30:  k[6] = k7;
       10:   31:  k[7] = k8;
       10:   32:  k[8] = k9;
       10:   33:  k[9] = k10;
       10:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:       struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;     
        -:   43:  //set up random number generator
      273:   44:  SelectStream(1);
      273:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      546:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      138:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      135:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     2970:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    29700:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    25650:   61:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
    13500:   65:        }
     1350:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      135:   73:  if (numPlayers == 2)
        -:   74:    {
       87:   75:      state->supplyCount[curse] = 10;
       87:   76:    }
       48:   77:  else if (numPlayers == 3)
        -:   78:    {
       48:   79:      state->supplyCount[curse] = 20;
       48:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      135:   87:  if (numPlayers == 2)
        -:   88:    {
       87:   89:      state->supplyCount[estate] = 8;
       87:   90:      state->supplyCount[duchy] = 8;
       87:   91:      state->supplyCount[province] = 8;
       87:   92:    }
        -:   93:  else
        -:   94:    {
       48:   95:      state->supplyCount[estate] = 12;
       48:   96:      state->supplyCount[duchy] = 12;
       48:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      135:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      135:  102:  state->supplyCount[silver] = 40;
      135:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     5670:  106:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  107:    {
    44820:  108:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  109:  {
    21042:  110:    if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
     2664:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:    {
      135:  115:      if (numPlayers == 2){ 
       87:  116:        state->supplyCount[i] = 8; 
       87:  117:      }
       48:  118:      else{ state->supplyCount[i] = 12; }
      135:  119:    }
        -:  120:        else
        -:  121:    {
     1197:  122:      state->supplyCount[i] = 10;
        -:  123:    }
     1332:  124:        break;
        -:  125:      }
        -:  126:    else    //card is not in the set choosen for the game
        -:  127:      {
    19710:  128:        state->supplyCount[i] = -1;
        -:  129:      }
    19710:  130:  }
        -:  131:
     2700:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      906:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      318:  140:      state->deckCount[i] = 0;
     2544:  141:      for (j = 0; j < 3; j++)
        -:  142:  {
      954:  143:    state->deck[i][j] = estate;
      954:  144:    state->deckCount[i]++;
      954:  145:  }
     5088:  146:      for (j = 3; j < 10; j++)
        -:  147:  {
     2226:  148:    state->deck[i][j] = copper;
     2226:  149:    state->deckCount[i]++;    
     2226:  150:  }
      318:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      906:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      318:  156:      if ( shuffle(i, state) < 0 )
        -:  157:  {
    #####:  158:    return -1;
        -:  159:  }
      318:  160:    }
        -:  161:
        -:  162:  //draw player hands
      906:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      318:  166:      state->handCount[i] = 0;
      318:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //  {
        -:  171:      //    drawCard(i, state);
        -:  172:      //  }
      318:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     7560:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     3645:  178:      state->embargoTokens[i] = 0;
     3645:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      135:  182:  state->outpostPlayed = 0;
      135:  183:  state->phase = 0;
      135:  184:  state->numActions = 1;
      135:  185:  state->numBuys = 1;
      135:  186:  state->playedCardCount = 0;
      135:  187:  state->whoseTurn = 0;
      135:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1620:  192:  for (it = 0; it < 5; it++){
      675:  193:    drawCard(state->whoseTurn, state);
      675:  194:  }
        -:  195:
      135:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      135:  198:  return 0;
      273:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      419:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      419:  209:  if (state->deckCount[player] < 1)
        9:  210:    return -1;
      410:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    10814:  214:  while (state->deckCount[player] > 0) {
     4997:  215:    card = floor(Random() * state->deckCount[player]);
     4997:  216:    newDeck[newDeckPos] = state->deck[player][card];
     4997:  217:    newDeckPos++;
   114944:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    52475:  219:      state->deck[player][i] = state->deck[player][i+1];
    52475:  220:    }
     4997:  221:    state->deckCount[player]--;
        -:  222:  }
    10814:  223:  for (i = 0; i < newDeckPos; i++) {
     4997:  224:    state->deck[player][i] = newDeck[i];
     4997:  225:    state->deckCount[player]++;
     4997:  226:  }
        -:  227:
      410:  228:  return 0;
      419:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{ 
        -:  233:  int card;
      300:  234:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
      300:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:  
        -:  242:  //check if player has enough actions
      300:  243:  if ( state->numActions < 1 )
        -:  244:    {
      252:  245:      return -1;
        -:  246:    }
        -:  247:  
        -:  248:  //get card played
       48:  249:  card = handCard(handPos, state);
        -:  250:  
        -:  251:  //check if selected card is an action
       96:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //play card
       48:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:  
        -:  263:  //reduce number of actions
       48:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       48:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:  
       48:  269:  return 0;
      300:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      232:  280:  who = state->whoseTurn;
        -:  281:
      232:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        4:  285:    return -1;
      228:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
      228:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
      228:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      228:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
      228:  299:    state->coins = (state->coins) - (getCost(supplyPos));
      228:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      228:  308:  return 0;
      232:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
     1824:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     3696:  316:  int currentPlayer = whoseTurn(state);
     3696:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      457:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        1:  326:  int count = 0;
        -:  327:
        2:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
       16:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
        7:  335:      if (state->hand[player][i] == card) count++;
        7:  336:    }
        -:  337:
        2:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
        1:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
     6504:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
      241:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
     3074:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     1296:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     1296:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
     1296:  359:  }
      241:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
      241:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
      120:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
      120:  365:  }
        -:  366:  else{
      121:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
      241:  370:  state->outpostPlayed = 0;
      241:  371:  state->phase = 0;
      241:  372:  state->numActions = 1;
      241:  373:  state->coins = 0;
      241:  374:  state->numBuys = 1;
      241:  375:  state->playedCardCount = 0;
      241:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
     2892:  380:  for (k = 0; k < 5; k++){
     1205:  381:    drawCard(state->whoseTurn, state);//Draw a card
     1205:  382:  }
        -:  383:
        -:  384:  //Update money
      241:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
      241:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:  
        -:  394:  //if stack of Province cards is empty, the game ends
      248:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        7:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
      241:  401:  j = 0;
    12532:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     6025:  404:      if (state->supplyCount[i] == 0)
        -:  405:  {
    #####:  406:    j++;
    #####:  407:  }
     6025:  408:    }
      241:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
      241:  414:  return 0;
      248:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       12:  420:  int score = 0;
        -:  421:  //score from hand
       84:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       30:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       30:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       30:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       30:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       30:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       30:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       30:  430:    }
        -:  431:
        -:  432:  //score from discard
      276:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
      126:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
      138:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
      126:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
      156:  438:      if (state->discard[player][i] == province) { score = score + 6; };
      126:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
      126:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      126:  441:    }
        -:  442:
        -:  443:  //score from deck
      276:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
      126:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
      132:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
      126:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
      144:  449:      if (state->deck[player][i] == province) { score = score + 6; };
      126:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
      126:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      126:  452:    }
        -:  453:
       12:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;  
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:  {
    #####:  469:    players[i] = -9999;
    #####:  470:  }
        -:  471:      else
        -:  472:  {
    #####:  473:    players[i] = scoreFor (i, state);
        -:  474:  }
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:  {
    #####:  483:    j = i;
    #####:  484:  }
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:  {
    #####:  494:    players[i]++;
    #####:  495:  }
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:  {
    #####:  504:    j = i;
    #####:  505:  }
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:  {
    #####:  514:    players[i] = 1;
    #####:  515:  }
        -:  516:      else
        -:  517:  {
    #####:  518:    players[i] = 0;
        -:  519:  }
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{ int count;
        -:  527:  int deckCounter;
    13838:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     3810:  533:    for (i = 0; i < state->discardCount[player];i++){
     1813:  534:      state->deck[player][i] = state->discard[player][i];
     1813:  535:      state->discard[player][i] = -1;
     1813:  536:    }
        -:  537:
       92:  538:    state->deckCount[player] = state->discardCount[player];
       92:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       92:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       92:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       92:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       92:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       92:  559:    if (deckCounter == 0)
        1:  560:      return -1;
        -:  561:
       91:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       91:  563:    state->deckCount[player]--;
       91:  564:    state->handCount[player]++;//Increment hand count
       91:  565:  }
        -:  566:
        -:  567:  else{
    13746:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    13746:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    13746:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    13746:  576:    state->deckCount[player]--;
    13746:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    13837:  580:  return 0;
    13838:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      456:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       96:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
      192:  598:      return 3;
        -:  599:    case gold:
      120:  600:      return 6;
        -:  601:    case adventurer:
       24:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
       24:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:  
    #####:  643:  return -1;
      456:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      312:  653:  int currentPlayer = whoseTurn(state);
      312:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      312:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      312:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
      312:  660:  int z = 0;// this is the counter for the temp hand
      312:  661:  if (nextPlayer > (state->numPlayers - 1)){
       45:  662:    nextPlayer = 0;
       45:  663:  }
        -:  664:  
        -:  665:  
        -:  666:  //uses switch to select card and perform actions
      312:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
       90:  670:         return adventurerAction(state);
        -:  671:
        -:  672:    case council_room:
    #####:  673:       council_roomAction(state, &handPos, &i); 
    #####:  674:         break;
        -:  675:
        -:  676:    case feast:
        -:  677:      //gain card with cost up to 5
        -:  678:      //Backup hand
    #####:  679:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  680:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  681:  state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  682:      }
        -:  683:      //Backup hand
        -:  684:
        -:  685:      //Update Coins for Buy
    #####:  686:      updateCoins(currentPlayer, state, 5);
    #####:  687:      x = 1;//Condition to loop on
    #####:  688:      while( x == 1) {//Buy one card
    #####:  689:  if (supplyCount(choice1, state) <= 0){
        -:  690:    if (DEBUG)
        -:  691:      printf("None of that card left, sorry!\n");
        -:  692:
        -:  693:    if (DEBUG){
        -:  694:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  695:    }
    #####:  696:  }
    #####:  697:  else if (state->coins < getCost(choice1)){
    #####:  698:    printf("That card is too expensive!\n");
        -:  699:
        -:  700:    if (DEBUG){
        -:  701:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  702:    }
    #####:  703:  }
        -:  704:  else{
        -:  705:
        -:  706:    if (DEBUG){
        -:  707:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  708:    }
        -:  709:
    #####:  710:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  711:    x = 0;//No more buying cards
        -:  712:
        -:  713:    if (DEBUG){
        -:  714:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  715:    }
        -:  716:
        -:  717:  }
        -:  718:      }     
        -:  719:
        -:  720:      //Reset Hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  722:  state->hand[currentPlayer][i] = temphand[i];
    #####:  723:  temphand[i] = -1;
    #####:  724:      }
        -:  725:      //Reset Hand
        -:  726:            
    #####:  727:      return 0;
        -:  728:      
        -:  729:    case gardens:
    #####:  730:      return -1;
        -:  731:      
        -:  732:    case mine:
    #####:  733:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  734:
    #####:  735:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  736:  {
    #####:  737:    return -1;
        -:  738:  }
        -:  739:    
    #####:  740:      if (choice2 > treasure_map || choice2 < curse)
        -:  741:  {
    #####:  742:    return -1;
        -:  743:  }
        -:  744:
    #####:  745:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  746:  {
    #####:  747:    return -1;
        -:  748:  }
        -:  749:
    #####:  750:      gainCard(choice2, state, 2, currentPlayer);
        -:  751:
        -:  752:      //discard card from hand
    #####:  753:      discardCard(handPos, currentPlayer, state, 0);
        -:  754:
        -:  755:      //discard trashed card
    #####:  756:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  757:  {
    #####:  758:    if (state->hand[currentPlayer][i] == j)
        -:  759:      {
    #####:  760:        discardCard(i, currentPlayer, state, 0);      
    #####:  761:        break;
        -:  762:      }
    #####:  763:  }
        -:  764:      
    #####:  765:      return 0;
        -:  766:      
        -:  767:    case remodel:
    #####:  768:        return remodelAction(state, choice1, choice2, handPos);
        -:  769:    
        -:  770:    case smithy:
       12:  771:       return smithyAction(state, handPos, currentPlayer); 
        -:  772:
        -:  773:    case village:
      101:  774:       return villageAction(state, handPos); 
        -:  775:    
        -:  776:    case baron:
    #####:  777:      state->numBuys++;//Increase buys by 1!
    #####:  778:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  779:  int p = 0;//Iterator for hand!
    #####:  780:  int card_not_discarded = 1;//Flag for discard set!
    #####:  781:  while(card_not_discarded){
    #####:  782:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  783:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  784:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  785:      state->discardCount[currentPlayer]++;
    #####:  786:      for (;p < state->handCount[currentPlayer]; p++){
    #####:  787:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  788:      }
    #####:  789:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  790:      state->handCount[currentPlayer]--;
    #####:  791:      card_not_discarded = 0;//Exit the loop
    #####:  792:    }
    #####:  793:    else if (p > state->handCount[currentPlayer]){
        -:  794:      if(DEBUG) {
        -:  795:        printf("No estate cards in your hand, invalid choice\n");
        -:  796:        printf("Must gain an estate if there are any\n");
        -:  797:      }
    #####:  798:      if (supplyCount(estate, state) > 0){
    #####:  799:        gainCard(estate, state, 0, currentPlayer);
    #####:  800:        state->supplyCount[estate]--;//Decrement estates
    #####:  801:        if (supplyCount(estate, state) == 0){
    #####:  802:    isGameOver(state);
    #####:  803:        }
    #####:  804:      }
    #####:  805:      card_not_discarded = 0;//Exit the loop
    #####:  806:    }
        -:  807:          
        -:  808:    else{
    #####:  809:      p++;//Next card
        -:  810:    }
        -:  811:  }
    #####:  812:      }
        -:  813:          
        -:  814:      else{
    #####:  815:  if (supplyCount(estate, state) > 0){
    #####:  816:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  817:    state->supplyCount[estate]--;//Decrement Estates
    #####:  818:    if (supplyCount(estate, state) == 0){
    #####:  819:      isGameOver(state);
    #####:  820:    }
    #####:  821:  }
        -:  822:      }
        -:  823:      
        -:  824:      
    #####:  825:      return 0;
        -:  826:    
        -:  827:    case great_hall:
        -:  828:      //+1 Card
      100:  829:      drawCard(currentPlayer, state);
        -:  830:      
        -:  831:      //+1 Actions
      100:  832:      state->numActions++;
        -:  833:      
        -:  834:      //discard card from hand
      100:  835:      discardCard(handPos, currentPlayer, state, 0);
      100:  836:      return 0;
        -:  837:    
        -:  838:    case minion:
        -:  839:      //+1 action
    #####:  840:      state->numActions++;
        -:  841:      
        -:  842:      //discard card from hand
    #####:  843:      discardCard(handPos, currentPlayer, state, 0);
        -:  844:      
    #####:  845:      if (choice1)    //+2 coins
        -:  846:  {
    #####:  847:    state->coins = state->coins + 2;
    #####:  848:  }
        -:  849:      
    #####:  850:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  851:  {
        -:  852:    //discard hand
    #####:  853:    while(numHandCards(state) > 0)
        -:  854:      {
    #####:  855:        discardCard(handPos, currentPlayer, state, 0);
        -:  856:      }
        -:  857:        
        -:  858:    //draw 4
    #####:  859:    for (i = 0; i < 4; i++)
        -:  860:      {
    #####:  861:        drawCard(currentPlayer, state);
    #####:  862:      }
        -:  863:        
        -:  864:    //other players discard hand and redraw if hand size > 4
    #####:  865:    for (i = 0; i < state->numPlayers; i++)
        -:  866:      {
    #####:  867:        if (i != currentPlayer)
        -:  868:    {
    #####:  869:      if ( state->handCount[i] > 4 )
        -:  870:        {
        -:  871:          //discard hand
    #####:  872:          while( state->handCount[i] > 0 )
        -:  873:      {
    #####:  874:        discardCard(handPos, i, state, 0);
        -:  875:      }
        -:  876:              
        -:  877:          //draw 4
    #####:  878:          for (j = 0; j < 4; j++)
        -:  879:      {
    #####:  880:        drawCard(i, state);
    #####:  881:      }
    #####:  882:        }
    #####:  883:    }
    #####:  884:      }
        -:  885:        
    #####:  886:  }
    #####:  887:      return 0;
        -:  888:    
        -:  889:    case steward:
    #####:  890:      if (choice1 == 1)
        -:  891:  {
        -:  892:    //+2 cards
    #####:  893:    drawCard(currentPlayer, state);
    #####:  894:    drawCard(currentPlayer, state);
    #####:  895:  }
    #####:  896:      else if (choice1 == 2)
        -:  897:  {
        -:  898:    //+2 coins
    #####:  899:    state->coins = state->coins + 2;
    #####:  900:  }
        -:  901:      else
        -:  902:{
        -:  903:    //trash 2 cards in hand
    #####:  904:    discardCard(choice2, currentPlayer, state, 1);
    #####:  905:    discardCard(choice3, currentPlayer, state, 1);
        -:  906:  }
        -:  907:      
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
    #####:  910:      return 0;
        -:  911:    
        -:  912:    case tribute:
    #####:  913:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  914:  if (state->deckCount[nextPlayer] > 0){
    #####:  915:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  916:    state->deckCount[nextPlayer]--;
    #####:  917:  }
    #####:  918:  else if (state->discardCount[nextPlayer] > 0){
    #####:  919:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  920:    state->discardCount[nextPlayer]--;
    #####:  921:  }
        -:  922:  else{
        -:  923:    //No Card to Reveal
        -:  924:    if (DEBUG){
        -:  925:      printf("No cards to reveal\n");
        -:  926:    }
        -:  927:  }
    #####:  928:      }
        -:  929:      
        -:  930:      else{
    #####:  931:  if (state->deckCount[nextPlayer] == 0){
    #####:  932:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  933:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  934:      state->deckCount[nextPlayer]++;
    #####:  935:      state->discard[nextPlayer][i] = -1;
    #####:  936:      state->discardCount[nextPlayer]--;
    #####:  937:    }
        -:  938:          
    #####:  939:    shuffle(nextPlayer,state);//Shuffle the deck
    #####:  940:  } 
    #####:  941:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  943:  state->deckCount[nextPlayer]--;
    #####:  944:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  945:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  946:  state->deckCount[nextPlayer]--;
        -:  947:      }    
        -:  948:           
    #####:  949:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  950:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  951:  state->playedCardCount++;
    #####:  952:  tributeRevealedCards[1] = -1;
    #####:  953:      }
        -:  954:
    #####:  955:      for (i = 0; i <= 2; i ++){
    #####:  956:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  957:    state->coins += 2;
    #####:  958:  }
        -:  959:        
    #####:  960:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  961:    drawCard(currentPlayer, state);
    #####:  962:    drawCard(currentPlayer, state);
    #####:  963:  }
        -:  964:  else{//Action Card
    #####:  965:    state->numActions = state->numActions + 2;
        -:  966:  }
    #####:  967:      }
        -:  968:      
    #####:  969:      return 0;
        -:  970:    
        -:  971:    case ambassador:
    #####:  972:      j = 0;    //used to check if player has enough cards to discard
        -:  973:
    #####:  974:      if (choice2 > 2 || choice2 < 0)
        -:  975:  {
    #####:  976:    return -1;        
        -:  977:  }
        -:  978:
    #####:  979:      if (choice1 == handPos)
        -:  980:  {
    #####:  981:    return -1;
        -:  982:  }
        -:  983:
    #####:  984:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  985:  {
    #####:  986:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  987:      {
    #####:  988:        j++;
    #####:  989:      }
    #####:  990:  }
    #####:  991:      if (j < choice2)
        -:  992:  {
    #####:  993:    return -1;        
        -:  994:  }
        -:  995:
        -:  996:      if (DEBUG) 
        -:  997:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  998:
        -:  999:      //increase supply count for choosen card by amount being discarded
    #####: 1000:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1001:      
        -: 1002:      //each other player gains a copy of revealed card
    #####: 1003:      for (i = 0; i < state->numPlayers; i++)
        -: 1004:  {
    #####: 1005:    if (i != currentPlayer)
        -: 1006:      {
    #####: 1007:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1008:      }
    #####: 1009:  }
        -: 1010:
        -: 1011:      //discard played card from hand
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1013:
        -: 1014:      //trash copies of cards returned to supply
    #####: 1015:      for (j = 0; j < choice2; j++)
        -: 1016:  {
    #####: 1017:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1018:      {
    #####: 1019:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1020:    {
    #####: 1021:      discardCard(i, currentPlayer, state, 1);
    #####: 1022:      break;
        -: 1023:    }
    #####: 1024:      }
    #####: 1025:  }     
        -: 1026:
    #####: 1027:      return 0;
        -: 1028:    
        -: 1029:    case cutpurse:
        -: 1030:
    #####: 1031:      updateCoins(currentPlayer, state, 2);
    #####: 1032:      for (i = 0; i < state->numPlayers; i++)
        -: 1033:  {
    #####: 1034:    if (i != currentPlayer)
        -: 1035:      {
    #####: 1036:        for (j = 0; j < state->handCount[i]; j++)
        -: 1037:    {
    #####: 1038:      if (state->hand[i][j] == copper)
        -: 1039:        {
    #####: 1040:          discardCard(j, i, state, 0);
    #####: 1041:          break;
        -: 1042:        }
    #####: 1043:      if (j == state->handCount[i])
        -: 1044:        {
    #####: 1045:          for (k = 0; k < state->handCount[i]; k++)
        -: 1046:      {
        -: 1047:        if (DEBUG)
        -: 1048:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1049:      } 
    #####: 1050:          break;
        -: 1051:        }   
    #####: 1052:    }
        -: 1053:          
    #####: 1054:      }
        -: 1055:        
    #####: 1056:  }       
        -: 1057:
        -: 1058:      //discard played card from hand
    #####: 1059:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1060:
    #####: 1061:      return 0;
        -: 1062:
        -: 1063:    
        -: 1064:    case embargo: 
        -: 1065:      //+2 Coins
    #####: 1066:      state->coins = state->coins + 2;
        -: 1067:      
        -: 1068:      //see if selected pile is in play
    #####: 1069:      if ( state->supplyCount[choice1] == -1 )
        -: 1070:  {
    #####: 1071:    return -1;
        -: 1072:  }
        -: 1073:      
        -: 1074:      //add embargo token to selected supply pile
    #####: 1075:      state->embargoTokens[choice1]++;
        -: 1076:      
        -: 1077:      //trash card
    #####: 1078:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1079:      return 0;
        -: 1080:    
        -: 1081:    case outpost:
        -: 1082:      //set outpost flag
        9: 1083:      state->outpostPlayed++;
        -: 1084:      
        -: 1085:      //discard card
        9: 1086:      discardCard(handPos, currentPlayer, state, 0);
        9: 1087:      return 0;
        -: 1088:    
        -: 1089:    case salvager:
        -: 1090:      //+1 buy
    #####: 1091:      state->numBuys++;
        -: 1092:      
    #####: 1093:      if (choice1)
        -: 1094:  {
        -: 1095:    //gain coins equal to trashed card
    #####: 1096:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1097:    //trash card
    #####: 1098:    discardCard(choice1, currentPlayer, state, 1);  
    #####: 1099:  }
        -: 1100:      
        -: 1101:      //discard card
    #####: 1102:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1103:      return 0;
        -: 1104:    
        -: 1105:    case sea_hag:
    #####: 1106:      for (i = 0; i < state->numPlayers; i++){
    #####: 1107:  if (i != currentPlayer){
    #####: 1108:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1109:    state->discardCount[i]++;
    #####: 1110:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1111:  }
    #####: 1112:      }
    #####: 1113:      return 0;
        -: 1114:    
        -: 1115:    case treasure_map:
        -: 1116:      //search hand for another treasure_map
    #####: 1117:      index = -1;
    #####: 1118:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:  {
    #####: 1120:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1121:      {
    #####: 1122:        index = i;
    #####: 1123:        break;
        -: 1124:      }
    #####: 1125:  }
    #####: 1126:      if (index > -1)
        -: 1127:  {
        -: 1128:    //trash both treasure cards
    #####: 1129:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1130:    discardCard(index, currentPlayer, state, 1);
        -: 1131:
        -: 1132:    //gain 4 Gold cards
    #####: 1133:    for (i = 0; i < 4; i++)
        -: 1134:      {
    #####: 1135:        gainCard(gold, state, 1, currentPlayer);
    #####: 1136:      }
        -: 1137:        
        -: 1138:    //return success
    #####: 1139:    return 1;
        -: 1140:  }
        -: 1141:      
        -: 1142:      //no second treasure_map found in hand
    #####: 1143:      return -1;
        -: 1144:    }
        -: 1145:
    #####: 1146:  return -1;
      312: 1147:}
        -: 1148:
        -: 1149:
        -: 1150:
        -: 1151:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1152:{
        -: 1153:  
        -: 1154:  //if card is not trashed, added to Played pile 
      222: 1155:  if (trashFlag < 1)
        -: 1156:    {
        -: 1157:      //add card to played pile
      222: 1158:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      222: 1159:      state->playedCardCount++;
      222: 1160:    }
        -: 1161:  
        -: 1162:  //set played card to -1
      222: 1163:  state->hand[currentPlayer][handPos] = -1;
        -: 1164:  
        -: 1165:  //remove card from player's hand
      222: 1166:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1167:    {
        -: 1168:      //reduce number of cards in hand
        2: 1169:      state->handCount[currentPlayer]--;
        2: 1170:    }
      220: 1171:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1172:    {
        -: 1173:      //reduce number of cards in hand
    #####: 1174:      state->handCount[currentPlayer]--;
    #####: 1175:    }
        -: 1176:  else  
        -: 1177:    {
        -: 1178:      //replace discarded card with last card in hand
      220: 1179:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1180:      //set last card to -1
      220: 1181:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1182:      //reduce number of cards in hand
      220: 1183:      state->handCount[currentPlayer]--;
        -: 1184:    }
        -: 1185:  
      222: 1186:  return 0;
        -: 1187:}
        -: 1188:
        -: 1189:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1190:{
        -: 1191:  //Note: supplyPos is enum of choosen card
        -: 1192:  
        -: 1193:  //check if supply pile is empty (0) or card is not used in game (-1)
      228: 1194:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1195:    {
    #####: 1196:      return -1;
        -: 1197:    }
        -: 1198:  
        -: 1199:  //added card for [whoseTurn] current player:
        -: 1200:  // toFlag = 0 : add to discard
        -: 1201:  // toFlag = 1 : add to deck
        -: 1202:  // toFlag = 2 : add to hand
        -: 1203:
      228: 1204:  if (toFlag == 1)
        -: 1205:    {
    #####: 1206:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1207:      state->deckCount[player]++;
    #####: 1208:    }
      228: 1209:  else if (toFlag == 2)
        -: 1210:    {
    #####: 1211:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1212:      state->handCount[player]++;
    #####: 1213:    }
        -: 1214:  else
        -: 1215:    {
      228: 1216:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      228: 1217:      state->discardCount[player]++;
        -: 1218:    }
        -: 1219:  
        -: 1220:  //decrease number in supply pile
      228: 1221:  state->supplyCount[supplyPos]--;
        -: 1222:   
      228: 1223:  return 0;
      228: 1224:}
        -: 1225:
        -: 1226:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1227:{
        -: 1228:  int i;
        -: 1229:  
        -: 1230:  //reset coin count
      424: 1231:  state->coins = 0;
        -: 1232:
        -: 1233:  //add coins for each Treasure card in player's hand
     5280: 1234:  for (i = 0; i < state->handCount[player]; i++)
        -: 1235:    {
     2216: 1236:      if (state->hand[player][i] == copper)
        -: 1237:  {
     1119: 1238:    state->coins += 1;
     1119: 1239:  }
     1097: 1240:      else if (state->hand[player][i] == silver)
        -: 1241:  {
      390: 1242:    state->coins += 2;
      390: 1243:  }
      707: 1244:      else if (state->hand[player][i] == gold)
        -: 1245:  {
       78: 1246:    state->coins += 3;
       78: 1247:  } 
     2216: 1248:    } 
        -: 1249:
        -: 1250:  //add bonus
      424: 1251:  state->coins += bonus;
        -: 1252:
      424: 1253:  return 0;
        -: 1254:}
        -: 1255:
        -: 1256:int smithyAction(struct gameState *state, int handPos, int currentPlayer)
        -: 1257:{
        -: 1258:   
       12: 1259:     int i = 0;
        -: 1260:
       96: 1261:    for (i = 0; i < 3; i++)
        -: 1262:  {
       36: 1263:    drawCard(currentPlayer, state);
       36: 1264:  }
        -: 1265:      
        -: 1266:      //discard card from hand
       12: 1267:      discardCard(handPos, currentPlayer, state, 0);
        -: 1268:
       12: 1269:    return 0;
        -: 1270:}
        -: 1271:
        -: 1272:int adventurerAction(struct gameState *state)
        -: 1273:{
       90: 1274:    int currentPlayer = whoseTurn(state);
       90: 1275:    int cardDrawn = 0;
       90: 1276:    int drawntreasure = 0;
        -: 1277:    int temphand[MAX_HAND];
        -: 1278:
       90: 1279:    int z = 0;   
    23622: 1280:    while(drawntreasure<2){
    11721: 1281:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        8: 1282:    shuffle(currentPlayer, state);
        8: 1283:  }
    11721: 1284:  drawCard(currentPlayer, state);
    11721: 1285:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    34839: 1286:  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      180: 1287:    drawntreasure++;
        -: 1288:  else{
    11541: 1289:    temphand[z]=cardDrawn;
    11541: 1290:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    11541: 1291:    z++;
        -: 1292:  }
        -: 1293:      }
    23262: 1294:      while(z-1>=0){
    11541: 1295:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    11541: 1296:  z=z-1;
        -: 1297:      }
        -: 1298:
       90: 1299:    return 0;
        -: 1300:}
        -: 1301:
        -: 1302:void council_roomAction(struct gameState *state, int* handPos, int *i)
        -: 1303:{
    #####: 1304:    int currentPlayer = whoseTurn(state);
        -: 1305:      //+4 Cards
    #####: 1306:      for (i = 0; i < 5; i++)
        -: 1307:  {
    #####: 1308:    drawCard(currentPlayer, state);
    #####: 1309:  }
        -: 1310:      
        -: 1311:      //+1 Buy
    #####: 1312:      state->numBuys++;
        -: 1313:      
        -: 1314:      //Each other player draws a card
    #####: 1315:      for (i = 0; i < state->numPlayers; i++)
        -: 1316:  {
    #####: 1317:    if ( i != currentPlayer )
        -: 1318:      {
    #####: 1319:        drawCard(i, state);
    #####: 1320:      }
    #####: 1321:  }
        -: 1322:      
        -: 1323:      //put played card in played card pile
    #####: 1324:      discardCard(handPos, currentPlayer, state, 0);
        -: 1325:    
    #####: 1326:} 
        -: 1327:
        -: 1328:int villageAction(struct gameState *state, int handPos){
        -: 1329:      
      101: 1330:      int currentPlayer = whoseTurn(state); 
        -: 1331:      //+1 Card
      101: 1332:      drawCard(currentPlayer, state);
        -: 1333:      
        -: 1334:      //+2 Actions
      101: 1335:      state->numActions++;
        -: 1336:      
        -: 1337:      //discard played card from hand
      101: 1338:      discardCard(handPos, currentPlayer, state, 0);
        -: 1339:
      101: 1340:    return 0; 
        -: 1341:}
        -: 1342:
        -: 1343:int remodelAction(struct gameState *state, int choice1, int choice2, int handPos)
        -: 1344:{ 
    #####: 1345:    int currentPlayer = whoseTurn(state);
        -: 1346:    int i, j;
        -: 1347:    
    #####: 1348:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1349:
    #####: 1350:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1351:  {
    #####: 1352:    return -1;
        -: 1353:  }
        -: 1354:
    #####: 1355:      gainCard(choice2, state, 0, currentPlayer);
        -: 1356:
        -: 1357:      //discard card from hand
    #####: 1358:      discardCard(handPos, currentPlayer, state, 0);
        -: 1359:
        -: 1360:      //discard trashed card
    #####: 1361:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1362:  {
    #####: 1363:    if (state->hand[currentPlayer][i] == j)
        -: 1364:      {
    #####: 1365:        discardCard(i, currentPlayer, state, 0);      
    #####: 1366:        break;
        -: 1367:      }
    #####: 1368:  }
        -: 1369:
        -: 1370:
    #####: 1371:      return 0;
    #####: 1372:}
        -: 1373:
        -: 1374://end of dominion.c
