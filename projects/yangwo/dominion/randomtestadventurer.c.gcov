        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2:randomtestadventurer.c
        -:    3:Tests the adventurer card from dominion.c
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
function main called 2 returned 100% blocks executed 100%
        -:    8:#include "rngs.h"
        2:    9:#include <stdlib.h>
        2:   10:#include <stdio.h>
        -:   11:#include <math.h>
      204:   12:#include <assert.h>
branch  0 taken 98%
branch  1 taken 2%
        -:   13:
      100:   14:#define NUMBER_OF_TESTS 3
      100:   15:
      100:   16:int main (int argc, char** argv) {
        -:   17:
      100:   18:
      100:   19:	printf("Starting test\n");
      100:   20:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
      100:   21:	int numSuccess = 0, numFail = 0;
      100:   22:
      100:   23:	for(int i = 0; i < NUMBER_OF_TESTS; i++) {
        -:   24:
    52720:   25:
branch  0 taken 99%
branch  1 taken 1%
    78780:   26:		//printf("Here2\n");
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 9%
branch  5 taken 91%
     2384:   27:		int numPlayers = rand() % 4;
     2384:   28:		int player = 0;
    26260:   29:		int seed = rand();
      100:   30:		struct gameState *g = malloc(sizeof(struct gameState));			
        -:   31:		initializeGame(numPlayers, k, seed, g);		
        -:   32:
    53116:   33:
branch  0 taken 99%
branch  1 taken 1%
    79374:   34:
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 10%
branch  5 taken 90%
     2582:   35:		g->deckCount[player] = rand() % MAX_DECK;						
     2582:   36:		g->discardCount[player] = rand() % MAX_DECK;					
    26458:   37:		int oldHand = g->handCount[player] = rand() % MAX_HAND;			
        -:   38:		int opponentHand = g->handCount[1] = rand() % MAX_HAND;
      204:   39:		int opponentDeck = g->deckCount[1] = rand() % MAX_DECK;
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 2%
branch  3 taken 98%
branch  4 taken 100%
branch  5 taken 0%
branch  6 taken 100%
branch  7 taken 0%
        2:   40:
        -:   41:
       98:   42:		printf("%d\n", g->handCount[player]);
        -:   43:		printf("%d\n", g->handCount[1]);	  
      100:   44:		int treasureStatus = 0;	
      100:   45:								
        2:   46:	
        2:   47:		for(int t = 0 ; t < g->handCount[player]; t++) {
        -:   48:			if((g->hand[player][t] == gold) || (g->hand[player][t] == silver) || (g->hand[player][t] == copper)) {
        2:   49:				treasureStatus++;
        -:   50:			}
        -:   51:		}
        -:   52:		cardEffect(adventurer, 1, 1, 1, g, 0, 0);						
        -:   53:
        -:   54:		for(int j = 0 ; j < g->handCount[player]; j++) {
        -:   55:			if((g->hand[player][j] == gold) || (g->hand[player][j] == silver) || (g->hand[player][j] == copper)) {
        -:   56:				treasureStatus--;
        -:   57:			}
        -:   58:		}
        -:   59:		
        -:   60:		
        -:   61:		if(treasureStatus < 0 && oldHand + 1 == g->handCount[player] && opponentHand == g->handCount[1] && opponentDeck == g->deckCount[1]) 
        -:   62:			numSuccess++;											
        -:   63:		else {
        -:   64:			numFail++;
        -:   65:		}
        -:   66:		
        -:   67:		//printf("Pre-Free\n");
        -:   68:		free(g);
        -:   69:		//printf("Post-Free\n");
        -:   70:	}
        -:   71:
        -:   72:	printf("Testing adventurer card...\nNumber of successful tests: %d. Number of failed tests: %d. Total number of tests: %d]\n", numSuccess, numFail, NUMBER_OF_TESTS);
        -:   73:
        -:   74:	return 0;
        -:   75:}
