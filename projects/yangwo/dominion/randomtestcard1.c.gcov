        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2:randomtestcard1.c
        -:    3:Tests the Great Hall card from dominion.c
        -:    4:*/
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "rngs.h"
        -:    9:#include <stdlib.h>
        -:   10:#include <stdio.h>
        -:   11:#include <math.h>
        -:   12:#include <assert.h>
        -:   13:
        -:   14:#define NUMBER_OF_TESTS 100
        -:   15:
function main called 2 returned 100% blocks executed 90%
        -:   16:int main (int argc, char** argv) {
        -:   17:
        -:   18:
        2:   19:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        2:   20:	int numSuccess = 0, numFail = 0;
        -:   21:
      404:   22:	for(int i = 0; i < NUMBER_OF_TESTS; i++) {
branch  0 taken 99%
branch  1 taken 1%
        -:   23:
      200:   24:		struct gameState *g = malloc(sizeof(struct gameState));	
      200:   25:		int numPlayers = rand() % 4;
      200:   26:		int player = 0;
      200:   27:		int seed = rand();
        -:   28:
        -:   29:		
      200:   30:		initializeGame(numPlayers, k, seed, g);		
        -:   31:
      200:   32:		g->deckCount[player] = rand() % MAX_DECK;
      200:   33:        g->discardCount[player] = rand() % MAX_DECK;
      200:   34:        int originalHandCount = g->handCount[player] = rand() % MAX_HAND;
      200:   35:        int opponentHandCount = g->handCount[1] = rand() % MAX_HAND;
      200:   36:        int originalNumActions = g->numActions; 										
        -:   37:	
      200:   38:		cardEffect(great_hall, 1, 1, 1, g, 0, 0);						
        -:   39:
      600:   40:		if (originalHandCount  == g->handCount[player] && originalNumActions + 1  == g->numActions && opponentHandCount  == g->handCount[1]){
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
branch  4 taken 100%
branch  5 taken 0%
      200:   41:            numSuccess++;
      200:   42:        }
        -:   43:        else{
    #####:   44:        	numFail++;
        -:   45:        }
        -:   46:                        
        -:   47:
      200:   48:		free(g);
      200:   49:	}
        -:   50:
        2:   51:	printf("Testing Great Hall card...\nNumber of successful tests: %d. Number of failed tests: %d. Total number of tests: %d]\n", numSuccess, numFail, NUMBER_OF_TESTS);
        -:   52:
        2:   53:	return 0;
        -:   54:}
